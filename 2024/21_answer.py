import re
from collections import deque
from collections import Counter

codes = open('21_input').read().splitlines()

# keypad_sequences = {
#     'A0': ['<A'],
#     'A1': ['^<<A', '<^<A'],
#     'A2': ['^<A', '<^A'],
#     'A3': ['^A'],
#     'A4': ['^^<<A', '^<<^A', '^<^<A', '<^<^A', '<^^<A'],
#     'A5': ['^^<A', '^<^A', '<^^A'],
#     'A6': ['^^A'],
#     'A7': ['^^^<<A', '^^<^<A', '^<^^<A', '<^^^<A', '^^<<^A', '^<^<^A', '<^^<^A', '^<<^^A', '<^<^^A'],
#     'A8': ['^^^<A', '^^<^A', '^<^^A', '<^^^A'],
#     'A9': ['^^^A'],
#     '0A': ['>A'],
#     '01': ['^<A', '<^A'],
#     '02': ['^A'],
#     '03': ['^>A', '>^A'],
#     '04': ['^^<A', '^<^A'],
#     '05': ['^^A'],
#     '06': ['^^>A', '^>^A', '>^^A'],
#     '07': ['^^^<A', '^^<^A', '^<^^A'],
#     '08': ['^^^A'],
#     '09': ['^^^>A', '^^>^A', '^>^^A' '>^^^A'],
#     '1A': ['>>vA', '>v>A'],
#     '10': ['>vA'],
#     '12': ['>A'],
#     '13': ['>>A'],
#     '14': ['^A'],
#     '15': ['^>A', '>^A'],
#     '16': ['^>>A', '>^>A', '>>^A'],
#     '17': ['^^A'],
#     '18': ['^^>A', '^>^A', '>^^A'],
#     '19': ['^^>>A', '^>>^A', '^>^>A', '>^>^A', '>^^>A', '>>^^A'],
#     '2A': ['>A'],
#     '20': ['vA'],
#     '21': ['<A'],
#     '23': ['>A'],
#     '24': ['^<A', '<^A'],
#     '25': ['^A'],
#     '26': ['^>A', '>^A'],
#     '27': ['^^<A', '^<^A', '<^^A'],
#     '28': ['^^A'],
#     '29': ['^^>A', '^>^A', '>^^A'],
#     '3A': ['>A'],
#     '30': ['<vA', 'v<A'],
#     '31': ['<<A'],
#     '32': ['<A'],
#     '34': ['^<<A', '<^<A', '<<^A'],
#     '35': ['^<A', '<^A'],
#     '36': ['^A'],
#     '37': ['^^<<A', '^<<^A', '^<^<A', '<^<^A', '<^^<A', '<<^^A'],
#     '38': ['^^<A', '^<^A', '<^^A'],
#     '39': ['^^A'],
#     '4A': ['>>vvA', '>v>vA', 'v>v>A', '>vv>A', 'v>>vA'],
#     '40': ['>vvA', 'v>vA'],
#     '41': ['vA'],
#     '42': ['v>A', '>vA'],
#     '43': ['v>>A', '>v>A', '>>vA'],
#     '45': ['>A'],
#     '46': ['>>A'],
#     '47': ['^A'],
#     '48': ['^>A', '>^A'],
#     '49': ['^>>A', '>^>A', '>>^A'],
#     '5A': ['>vvA', 'v>vA', 'vv>A'],
#     '50': ['vvA'],
#     '51': ['v<A', '<vA'],
#     '52': ['vA'],
#     '53': ['v>A', '>vA'],
#     '54': ['<A'],
#     '56': ['>A'],
#     '57': ['^<A', '<^A'],
#     '58': ['^A'],
#     '59': ['^>A', '>^A'],
#     '6A': ['vvA'],
#     '60': ['<vvA', 'v<vA', 'vv<A'],
#     '61': ['v<<A', '<v<A', '<<vA'],
#     '62': ['v<A', '<vA'],
#     '63': ['vA'],
#     '64': ['<<A'],
#     '65': ['<A'],
#     '67': ['<<^A', '<^<A', '^<<A'],
#     '68': ['<^A', '^<A'],
#     '69': ['^A'],
#     '7A': ['>>vvvA', '>v>vvA', '>vv>vA', '>vvv>A', 'v>>vvA', 'v>v>vA', 'v>vv>A', 'vv>>vA', 'vv>v>A'],
#     '70': ['>vvvA', 'v>vvA', 'vv>vA'],
#     '71': ['vvA'],
#     '72': ['vv>A', 'v>vA', '>vvA'],
#     '73': ['>>vvA', '>v>vA', 'v>v>A', '>vv>A', 'v>>vA', 'vv>>A'],
#     '74': ['vA'],
#     '75': ['v>A', '>vA'],
#     '76': ['v>>A', '>v>A', '>>vA'],
#     '78': ['>A'],
#     '79': ['>>A'],
#     '8A': ['>vvvA', 'v>vvA', 'vv>vA', 'vvv>A'],
#     '80': ['vvvA'],
#     '81': ['<vvA', 'v<vA', 'vv<A'],
#     '82': ['vvA'],
#     '83': ['vv>A', 'v>vA', '>vvA'],
#     '84': ['<vA', 'v<A'],
#     '85': ['vA'],
#     '86': ['v>A', '>vA'],
#     '87': ['<A'],
#     '89': ['>A'],
#     '9A': ['vvvA'],
#     '90': ['vvv<A', '<vvvA', 'v<vvA', 'vv<vA'],
#     '91': ['vv<<A', 'v<v<A', '<vv<A', 'v<<vA', '<v<vA', '<<vvA'],
#     '92': ['vv<A', '<vvA', 'v<vA'],
#     '93': ['vvA'],
#     '94': ['v<<A', '<v<A', '<<vA'],
#     '95': ['v<A', '<vA'],
#     '96': ['vA'],
#     '97': ['<<A'],
#     '98': ['<A'],
# }
#
# robot_sequences = {
#     '^A': ['>A'],
#     '^<': ['v<A'],
#     '^v': ['vA'],
#     '^>': ['v>A', '>vA'],
#     'A<': ['v<<A', '<v<A'],
#     'Av': ['v<A', '<vA'],
#     'A>': ['vA'],
#     'A^': ['<A'],
#     '<A': ['>>^A', '>^>A'],
#     '<v': ['>A'],
#     '<>': ['>>A'],
#     '<^': ['>^A'],
#     'vA': ['^>A', '>^A'],
#     'v<': ['<A'],
#     'v>': ['>A'],
#     'v^': ['^A'],
#     '>A': ['^A'],
#     '><': ['<<A'],
#     '>v': ['<A'],
#     '>^': ['<^A', '^<A'],
#     '>>': ['A'],
#     '^^': ['A'],
#     '<<': ['A'],
#     'vv': ['A'],
#     'AA': ['A'],
# }

keypad_sequences = {
    'A0': ['<A'],
    'A1': ['^<<A'],
    'A2': ['^<A', '<^A'],
    'A3': ['^A'],
    'A4': ['^^<<A'],
    'A5': ['^^<A', '<^^A'],
    'A6': ['^^A'],
    'A7': ['^^^<<A'],
    'A8': ['^^^<A', '<^^^A'],
    'A9': ['^^^A'],
    '0A': ['>A'],
    '01': ['^<A', '<^A'],
    '02': ['^A'],
    '03': ['^>A', '>^A'],
    '04': ['^^<A'],
    '05': ['^^A'],
    '06': ['^^>A', '>^^A'],
    '07': ['^^^<A'],
    '08': ['^^^A'],
    '09': ['^^^>A', '>^^^A'],
    '1A': ['>>vA'],
    '10': ['>vA'],
    '12': ['>A'],
    '13': ['>>A'],
    '14': ['^A'],
    '15': ['^>A', '>^A'],
    '16': ['^>>A', '>>^A'],
    '17': ['^^A'],
    '18': ['^^>A', '>^^A'],
    '19': ['^^>>A', '>>^^A'],
    '2A': ['>A'],
    '20': ['vA'],
    '21': ['<A'],
    '23': ['>A'],
    '24': ['^<A', '<^A'],
    '25': ['^A'],
    '26': ['^>A', '>^A'],
    '27': ['^^<A', '<^^A'],
    '28': ['^^A'],
    '29': ['^^>A', '>^^A'],
    '3A': ['>A'],
    '30': ['<vA', 'v<A'],
    '31': ['<<A'],
    '32': ['<A'],
    '34': ['^<<A', '<<^A'],
    '35': ['^<A', '<^A'],
    '36': ['^A'],
    '37': ['^^<<A', '<<^^A'],
    '38': ['^^<A', '<^^A'],
    '39': ['^^A'],
    '4A': ['>>vvA'],
    '40': ['>vvA'],
    '41': ['vA'],
    '42': ['v>A', '>vA'],
    '43': ['v>>A', '>>vA'],
    '45': ['>A'],
    '46': ['>>A'],
    '47': ['^A'],
    '48': ['^>A', '>^A'],
    '49': ['^>>A', '>>^A'],
    '5A': ['>vvA', 'vv>A'],
    '50': ['vvA'],
    '51': ['v<A', '<vA'],
    '52': ['vA'],
    '53': ['v>A', '>vA'],
    '54': ['<A'],
    '56': ['>A'],
    '57': ['^<A', '<^A'],
    '58': ['^A'],
    '59': ['^>A', '>^A'],
    '6A': ['vvA'],
    '60': ['<vvA', 'vv<A'],
    '61': ['v<<A', '<<vA'],
    '62': ['v<A', '<vA'],
    '63': ['vA'],
    '64': ['<<A'],
    '65': ['<A'],
    '67': ['<<^A', '^<<A'],
    '68': ['<^A', '^<A'],
    '69': ['^A'],
    '7A': ['>>vvvA'],
    '70': ['>vvvA'],
    '71': ['vvA'],
    '72': ['vv>A', '>vvA'],
    '73': ['>>vvA', 'vv>>A'],
    '74': ['vA'],
    '75': ['v>A', '>vA'],
    '76': ['v>>A', '>>vA'],
    '78': ['>A'],
    '79': ['>>A'],
    '8A': ['>vvvA', 'vvv>A'],
    '80': ['vvvA'],
    '81': ['<vvA', 'vv<A'],
    '82': ['vvA'],
    '83': ['vv>A', '>vvA'],
    '84': ['<vA', 'v<A'],
    '85': ['vA'],
    '86': ['v>A', '>vA'],
    '87': ['<A'],
    '89': ['>A'],
    '9A': ['vvvA'],
    '90': ['vvv<A', '<vvvA'],
    '91': ['vv<<A', '<<vvA'],
    '92': ['vv<A', '<vvA'],
    '93': ['vvA'],
    '94': ['v<<A', '<<vA'],
    '95': ['v<A', '<vA'],
    '96': ['vA'],
    '97': ['<<A'],
    '98': ['<A'],
}

robot_sequences = {
    '^A': ['>A'],
    '^<': ['v<A'],
    '^v': ['vA'],
    '^>': ['v>A', '>vA'],
    'A<': ['v<<A'],
    'Av': ['v<A', '<vA'],
    'A>': ['vA'],
    'A^': ['<A'],
    '<A': ['>>^A'],
    '<v': ['>A'],
    '<>': ['>>A'],
    '<^': ['>^A'],
    'vA': ['^>A', '>^A'],
    'v<': ['<A'],
    'v>': ['>A'],
    'v^': ['^A'],
    '>A': ['^A'],
    '><': ['<<A'],
    '>v': ['<A'],
    '>^': ['<^A', '^<A'],
    '>>': ['A'],
    '^^': ['A'],
    '<<': ['A'],
    'vv': ['A'],
    'AA': ['A'],
}


def sequence_expand(i_seq, seq_type="RB"):
    seq_deque = deque(i_seq)
    cur_from = 'A'
    prev_output_seqs = [[]]
    while seq_deque:
        cur_next = seq_deque.popleft()
        cur_transition = cur_from + cur_next
        cur_from = cur_next
        if seq_type == "KP":
            transition_options = keypad_sequences[cur_transition]
        else:
            transition_options = robot_sequences[cur_transition]
        new_output_seqs = []
        while prev_output_seqs:
            cur_output_seq = prev_output_seqs.pop()
            for to in transition_options:
                new_output_version = cur_output_seq[::]
                new_output_version.extend(to)
                new_output_seqs.append(new_output_version)
        prev_output_seqs = new_output_seqs[::]

    poss_seqs = list(prev_output_seqs)
    poss_seqs.sort(key=len)
    min_len = len(poss_seqs[0])
    return list(map(lambda li: ''.join(li), [ps for ps in poss_seqs if len(ps) == min_len]))


complexity = 0
for cd in codes:
    print(cd)
    num = int(re.findall(r"\d+", cd)[0])
    kp_exp = sequence_expand(cd, 'KP')
    print(len(kp_exp))
    robo_one_exp = [sss for ss in kp_exp for sss in sequence_expand(ss)]
    print(len(robo_one_exp))
    robo_two_exp = [sss for ss in robo_one_exp for sss in sequence_expand(ss)]
    print(len(robo_two_exp))
    robo_three_exp = [sss for ss in robo_two_exp for sss in sequence_expand(ss)]
    print(len(robo_three_exp))
    complexity += min(map(len, robo_three_exp)) * num

print(complexity)
